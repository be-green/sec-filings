df
df %>% View
file_list[[1]]
all_filings$FilingText[306]
View(tmp)
tmp[3:nrow(tmp),]
tmp[3:nrow(tmp),] %>% View
rbindlist(holdings_tbls)
rbindlist(holdings_tbls, fill = T)
rbindlist(holdings_tbls, fill = T) %>% View
rbindlist(cleaned, fill = T)
rbindlist(cleaned)
rbindlist(cleaned, fill = T)
rbindlist(cleaned, fill = T) %>% View
rbindlist(cleaned, fill = T) %>% which_row(is_main_data)
rbindlist(cleaned, fill = T) %>% which_row(is_repeated)
source('~/Projects/sec-filings/src/helpers/header-helpers.R', echo=TRUE)
get_main_data <- function(df) {
df[which_row(df, is_main_data),]
}
rbindlist(cleaned, fill = T) %>% which_row(is_repeated)
rbindlist(cleaned, fill = T) %>% which_row(is_main_data())
rbindlist(cleaned, fill = T) %>% which_row(is_main_data
)
## check if it's a repeating vector (happens with html tables sometimes)
is_header_footer <- function(x) {
(is_repeated(x) | most_na(x))
}
rbindlist(cleaned, fill = T) %>% which_row(is_header_footer)
rbindlist(cleaned, fill = T) %>% View
lapply(cleaned, remove_header)
View(cleaned[[1]])
## check if it's mostly NA
most_na <- function(vec) {
sum(is.na(vec))/length(vec) > 0.5
}
lapply(cleaned, remove_header)
lapply(cleaned, remove_header) %>% View
lapply(cleaned, remove_header) %>% rbindlist
lapply(cleaned, remove_header) %>% rbindlist(fill = T)
lapply(cleaned, remove_header) %>% rbindlist(fill = T) %>% View
lapply(cleaned, remove_header) %>% lapply(function(x) colnames(x) <- x[1,]) %>%  rbindlist(use.names = T,fill = T) %>% View
lapply(cleaned, remove_header) %>% lapply(function(x) colnames(x) <- x[1,]; x) %>%  rbindlist(use.names = T,fill = T
lapply(cleaned, remove_header) %>% lapply(function(x) {colnames(x) <- x[1,]
x
}) %>%  rbindlist(use.names = T,fill = T) %>% View
lapply(cleaned, remove_header) %>% lapply(function(x) {colnames(x) <- x[1,]
x
})
cleaned[[1]] -> tmp
tmp[1,]
remove_header(tm)
remove_header(tmp) -> tmp
tmp
setnames(df, df[1,])
df <_ tmp
df <- tmp
setnames(df, df[1,])
df[1,]
df[1,][[1]]
df[1,][]
setnames(df, as.character(df[1,]))
df
df[1,] <- NULL
df[!1,]
make_names <- function(df) {
setnames(df, as.character(df[1,]))
df[!1,]
}
lapply(cleaned, remove_header) %>% lapply(make_names) %>%  rbindlist(use.names = T,fill = T
)
lapply(cleaned, remove_header) %>% lapply(make_names) %>%  rbindlist(use.names = T,fill = T) %>% View
cleaned <- lapply(holdings_tbls, clean_table) %>%
lapply(cleaned, remove_header) %>%
lapply(make_names) %>%
rbindlist(use.names = T,fill = T) %>%
get_main_data
cleaned <- lapply(holdings_tbls, clean_table) %>%
lapply(remove_header) %>%
lapply(make_names) %>%
rbindlist(use.names = T,fill = T) %>%
get_main_data
cleaned
cleaned %>% View
cleaned <- lapply(holdings_tbls, clean_table) %>%
lapply(remove_header) %>%
lapply(make_names) %>%
rbindlist(use.names = T,fill = T) %>%
fix_striped()
rvest::html_table
rvest:::html_table.xml_node
file_list[[1]]
file_list[[1]] -> x
header = NA
trim = TRUE
fill = FALSE
dec = "."
stopifnot(html_name(x) == "table")
html_name(x)
filings[[1]]
rows <- html_nodes(x, "tr")
rows
n <- length(rows)
n
cells <- lapply(rows, "html_nodes", xpath = ".//td|.//th")
ncols <- lapply(cells, html_attr, "colspan", default = "1")
ncols <- lapply(ncols, as.integer)
nrows <- lapply(cells, html_attr, "rowspan", default = "1")
nrows <- lapply(nrows, as.integer)
p <- unique(vapply(ncols, sum, integer(1)))
maxp <- max(p)
p
if (length(p) > 1 & maxp * n != sum(unlist(nrows)) & maxp *
n != sum(unlist(ncols))) {
if (!fill) {
stop("Table has inconsistent number of columns. ",
"Do you want fill = TRUE?", call. = FALSE)
}
}
maxp*n
length(p)
sum(unlist(nrows))
nrows
fill = T
if (length(p) > 1 & maxp * n != sum(unlist(nrows)) & maxp *
n != sum(unlist(ncols))) {
if (!fill) {
stop("Table has inconsistent number of columns. ",
"Do you want fill = TRUE?", call. = FALSE)
}
}
values <- lapply(cells, html_text, trim = trim)
out <- matrix(NA_character_, nrow = n, ncol = maxp)
for (i in seq_len(n)) {
row <- values[[i]]
ncol <- ncols[[i]]
col <- 1
for (j in seq_len(length(ncol))) {
out[i, col:(col + ncol[j] - 1)] <- row[[j]]
col <- col + ncol[j]
}
}
seq_len(n)
n
row
ncol
col
out[i, col:(col + ncol[j] - 1)]
for (i in seq_len(maxp)) {
for (j in seq_len(n)) {
rowspan <- nrows[[j]][i]
colspan <- ncols[[j]][i]
if (!is.na(rowspan) & (rowspan > 1)) {
if (!is.na(colspan) & (colspan > 1)) {
nrows[[j]] <- c(utils::head(nrows[[j]], i),
rep(rowspan, colspan - 1), utils::tail(nrows[[j]],
length(rowspan) - (i + 1)))
rowspan <- nrows[[j]][i]
}
for (k in seq_len(rowspan - 1)) {
l <- utils::head(out[j + k, ], i - 1)
r <- utils::tail(out[j + k, ], maxp - i + 1)
out[j + k, ] <- utils::head(c(l, out[j, i],
r), maxp)
}
}
}
}
if (is.na(header)) {
header <- all(html_name(cells[[1]]) == "th")
}
if (header) {
col_names <- out[1, , drop = FALSE]
out <- out[-1, , drop = FALSE]
}
else {
col_names <- paste0("X", seq_len(ncol(out)))
}
df <- lapply(seq_len(maxp), function(i) {
utils::type.convert(out[, i], as.is = TRUE, dec = dec)
})
df
class(df) <- "data.table
attr(df, "row.names") <- .set_row_names(length(df[[1]]))
if (length(unique(col_names)) < length(col_names)) {
warning("At least two columns have the same name")
}
df
}
class(df) <- "data.table"
attr(df, "row.names") <- .set_row_names(length(df[[1]]))
attr(df)
attr(df, "row.names")
if (length(unique(col_names)) < length(col_names)) {
warning("At least two columns have the same name")
}
df
names(df) <- col_names
class(df) <- "data.table"
if (length(unique(col_names)) < length(col_names)) {
warning("At least two columns have the same name")
}
df
rm(df)
rows <- html_nodes(x, "tr")
n <- length(rows)
cells <- lapply(rows, "html_nodes", xpath = ".//td|.//th")
ncols <- lapply(cells, html_attr, "colspan", default = "1")
ncols <- lapply(ncols, as.integer)
nrows <- lapply(cells, html_attr, "rowspan", default = "1")
nrows <- lapply(nrows, as.integer)
p <- unique(vapply(ncols, sum, integer(1)))
maxp <- max(p)
if (length(p) > 1 & maxp * n != sum(unlist(nrows)) & maxp *
n != sum(unlist(ncols))) {
if (!fill) {
stop("Table has inconsistent number of columns. ",
"Do you want fill = TRUE?", call. = FALSE)
}
}
values <- lapply(cells, html_text, trim = trim)
out <- matrix(NA_character_, nrow = n, ncol = maxp)
for (i in seq_len(n)) {
row <- values[[i]]
ncol <- ncols[[i]]
col <- 1
for (j in seq_len(length(ncol))) {
out[i, col:(col + ncol[j] - 1)] <- row[[j]]
col <- col + ncol[j]
}
}
for (i in seq_len(maxp)) {
for (j in seq_len(n)) {
rowspan <- nrows[[j]][i]
colspan <- ncols[[j]][i]
if (!is.na(rowspan) & (rowspan > 1)) {
if (!is.na(colspan) & (colspan > 1)) {
nrows[[j]] <- c(utils::head(nrows[[j]], i),
rep(rowspan, colspan - 1), utils::tail(nrows[[j]],
length(rowspan) - (i + 1)))
rowspan <- nrows[[j]][i]
}
for (k in seq_len(rowspan - 1)) {
l <- utils::head(out[j + k, ], i - 1)
r <- utils::tail(out[j + k, ], maxp - i + 1)
out[j + k, ] <- utils::head(c(l, out[j, i],
r), maxp)
}
}
}
}
if (is.na(header)) {
header <- all(html_name(cells[[1]]) == "th")
}
if (header) {
col_names <- out[1, , drop = FALSE]
out <- out[-1, , drop = FALSE]
}
else {
col_names <- paste0("X", seq_len(ncol(out)))
}
df <- lapply(seq_len(maxp), function(i) {
utils::type.convert(out[, i], as.is = TRUE, dec = dec)
})
names(df) <- col_names
class(df) <- "data.table"
if (length(unique(col_names)) < length(col_names)) {
warning("At least two columns have the same name")
}
df
clean_table(df)
clean_table(df) %>% View
clean_table(df) %>% remove_header()
clean_table(df) %>% remove_header() %>% View
all_filings
all_filings$FilingText[3]
all_filings$FilingText[10]
file_list <- get_filing_html(all_filings$FilingText[10])
file_list
file_list
filing <-
readLines(filing_text_link) %>%
paste0(collapse = "") %>%
str_split(pattern = "<HTML><HEAD>", simplify = T)
# returns an xml2 object containing all of the html
# in the relevant filing
# there can be multiple filings per text document,
# and this list will contain all of them
get_filing_html <- function(filing_text_link) {
filing <-
readLines(filing_text_link) %>%
paste0(collapse = "") %>%
str_split(pattern = "<TABLE>", simplify = T)
ends <- str_locate(filing, "</TABLE>")[,2]
file_list <- list()
for(i in 1:length(filing)) {
if(is.na(ends[i])) {
} else {
file_list[[i]] <- paste0("<HTML><HEAD>",
str_sub(filing[i], start = 0, end = ends[i]))
}
}
file_list <- Filter(function(x) !is.null(x),
file_list)
lapply(file_list, xml2::read_html)
}
# returns an xml2 object containing all of the html
# in the relevant filing
# there can be multiple filings per text document,
# and this list will contain all of them
get_filing_html <- function(filing_text_link) {
filing <-
readLines(filing_text_link) %>%
paste0(collapse = "") %>%
str_split(pattern = "<TABLE>", simplify = T)
ends <- str_locate(filing, "</TABLE>")[,2]
file_list <- list()
for(i in 1:length(filing)) {
if(is.na(ends[i])) {
} else {
file_list[[i]] <- paste0("<TABLE>",
str_sub(filing[i], start = 0, end = ends[i]))
}
}
file_list <- Filter(function(x) !is.null(x),
file_list)
lapply(file_list, xml2::read_html)
}
parse_filing_html <- function(filing) {
tbls <- rvest::html_table(filing, )
# grab tables with number,number
holdings_tbls <-
Filter(function(x) str_count(paste0(x,collapse = ""), "[0-9],[0-9]") > 5,
tbls)
holdings_tbls
}
file_list <- get_filing_html(all_filings$FilingText[10])
file_list[1]
file_list[[1]]
parse_filing_html(file_list[1])
parse_filing_html(file_list[[1]])
# returns an xml2 object containing all of the html
# in the relevant filing
# there can be multiple filings per text document,
# and this list will contain all of them
get_filing_html <- function(filing_text_link) {
filing <-
readLines(filing_text_link) %>%
paste0(collapse = "") %>%
str_split(pattern = "<TABLE>", simplify = T)
ends <- str_locate(filing, "</TABLE>")[,2]
file_list <- list()
for(i in 1:length(filing)) {
if(is.na(ends[i])) {
} else {
file_list[[i]] <- paste0("<TABLE>",
str_sub(filing[i], start = 0, end = ends[i]))
}
}
file_list <- Filter(function(x) !is.null(x),
file_list)
lapply(file_list, xml2::read_html)
}
parse_filing_html(file_list[[1]])
file_list <- get_filing_html(all_filings$FilingText[10])
file_list[[1]]
file_list[[1]] %>% as_list
install.packages("tabulizer")
?tabulizer::extract_tables
library(tabulizer)
library(tabulizer)
extract_tables("https://www.sec.gov/Archives/edgar/data/878719/000093506908000772/aicrhjcombnq_0108.txt")
dir.create("test")
tabulizer::extract_tables("test/tabulatest.pdf")
tmp <- tabulizer::extract_tables("test/tabulatest.pdf")
tmp %>% View
library(magrittr)
tmp %>% View
tmp[[1]] %>% View
tmp[[3]] %>% View
tmp[[4]] %>% View
tmp[[5]] %>% View
tmp[[10]] %>% View
tmp[[9]] %>% View
source('~/.active-rstudio-document', echo=TRUE)
tmp <- tabulizer::extract_tables("test/tabulatest.pdf") %>%
lapply(clean_table)
devtools::load_all()
devtools::load_all(path = "src")
lapply(list.files("src"), source)
lapply(list.files("src/", full.names = T), source)
lapply(list.files("src/", full.names = T, pattern = "*.R"), source)
tmp <- tabulizer::extract_tables("test/tabulatest.pdf") %>%
lapply(clean_table)
library(data.table)
tmp <- tabulizer::extract_tables("test/tabulatest.pdf") %>%
lapply(clean_table)
tmp[[1]]
tmp[[1]] %>% View
tmp <- tabulizer::extract_tables("test/tabulatest.pdf")
lapply(tmp, replace_empty)
lapply(tmp, replace_empty) %>% lapply(remove_header)
lapply(tmp, replace_empty) %>% lapply(remove_header) %>% View
tmp <- tabulizer::extract_tables("test/tabulatest.pdf")
tmp[[1]]
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "data.frame") %>%
lapply(clean_table)
tmp
tmp %>% View
tmp[[1]] %>% View
lapply(replace_empty) %>% View
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "data.frame") %>%
lapply(replace_empty) %>% View
tmp[[1]]
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "data.frame") %>%
lapply(replace_empty)
tmp[[1]]
tmp[[1]] %>% View
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "data.frame")
?tmp
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix") %>%
as.data.frame
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix") %>%
lapply(as.data.frame)
tmp[[1]]
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix") %>%
lapply(as.data.frame) %>%
lapply(replace_empty)
tmp[[1]]
tmp[[1]] %>% View
tmp$V3
tmp[[1]]$V3
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix") %>%
lapply(as.data.frame, stringsAsFactors = F) %>%
lapply(replace_empty)
tmp[[1]]
tmp[[1]]
almost_all_na <- function(x){
length(which(is.na(x)))/length(x) > 0.8
}
source('~/Projects/sec-filings/src/helpers/table-helpers.R', echo=TRUE)
source('~/Projects/sec-filings/src/helpers/table-helpers.R', echo=TRUE)
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix") %>%
lapply(as.data.frame, stringsAsFactors = F) %>%
lapply(replace_empty) %>%
lapply(remove_almost_na_cols)
remove_almost_na_cols <- function(df) {
UseMethod("remove_almost_na_cols")
}
remove_na_almost_cols.data.frame <- function(df) {
cols <- which(!almost_na_cols(df))
df[,cols]
}
remove_almost_na_cols.data.table <- function(df) {
cols <- which(!almost_na_cols(df))
df[,(cols), with = F]
}
remove_almost_na_cols(tmp[[1]])
remove_almost_na_cols.data.frame <- function(df) {
cols <- which(!almost_na_cols(df))
df[,cols]
}
remove_almost_na_cols(tmp[[1]])
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix") %>%
lapply(as.data.frame, stringsAsFactors = F) %>%
lapply(replace_empty) %>%
lapply(remove_almost_na_cols)
rbindlist(tmp)
tmp[[2]]
tmp[[2]] %>% View
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix")
tmp[[2]]
tmp[[2]] %>% View
tmp[[1]] %>% View
tmp <- tabulizer::extract_tables("test/tabulatest.pdf",
output = "matrix")
tmp[[1]]
tmp[[2]]
2.2/1.1
9 + 23.1/1.1
20/2.1
10/1.05
1 + (1/1.1)
20/(1 + (1/1.1))
ln(1)
log(1)
log(1) + log(20.9)
log(10.5) + log(10.5)
☺
"☺"
cat("\U+1F614")
cat("\\U+1F614")
cat("\U1F614")
sleep(60)
sleep
Sys.sleep(time = 60)
cat("\U1F614")
cat("\U1F634")
cat("\U1F635")
ln(10) + ln(11)
log(10) + log(11)
