check_comma()
check_comma(x)
check_pattern <- function(x, threshold = 0.3) {
sum(str_count(x))/length(x) > threshold
}
check_pattern <- function(x, pattern, threshold = 0.3) {
sum(str_count(x, pattern))/length(x) > threshold
}
check_comma <- function(x, threshold = 0.3) {
check_pattern(pattern = "[0-9],[0-9]{3}")
}
check_comma(X)
check_comma(x)
check_comma <- function(x, threshold = 0.3) {
check_pattern(, pattern = "[0-9],[0-9]{3}")
}
check_comma(x)
check_comma <- function(x, threshold = 0.3) {
check_pattern(x, pattern = "[0-9],[0-9]{3}")
}
check_comma(x)
check_percent <- function(x) {
check_pattern(x, pattern = "[0-9]\\%")
}
check_percent(x)
df
getwd()
list.files()
fread("./data/processed/1994/1/crawler.csv")
string <- "hello, my name is Brice."
grep("Brice", string)
grep("Sarah", string)
grep("Sarah|Brice", string)
replace_empty(df)
df
replace_empty(df)
as.data.frame(lapply(x, function(x) if (is.character(x) replace_empty(x) else x)
as.data.frame(lapply(x, function(x) if (is.character(x)) { replace_empty(x) } else {x})
}
check_pattern <- function(x, pattern, threshold = 0.3) {
sum(str_count(x, pattern))/length(x) > threshold
}
check_comma <- function(x, threshold = 0.3) {
check_pattern(x, pattern = "[0-9],[0-9]{3}")
}
check_percent <- function(x) {
check_pattern(x, pattern = "[0-9]\\%")
}
check_numeric <- function(x) {
!all_na(as.numeric(x))
}
## column functions
na_cols <- function(df) {
sapply(df, all_na)
}
remove_na_cols <- function(df) {
UseMethod("remove_na_cols")
}
remove_na_cols.data.frame <- function(df) {
cols <- which(!na_cols(df))
df[,cols]
}
remove_na_cols.data.table <- function(df) {
cols <- which(!na_cols(df))
df[,(cols), with = F]
}
as.data.frame(lapply(x,
function(x) {
if (is.character(x)) {
replace_empty(x) }
else {x}
)
)
}
replace_empty.data.frame <- function(x) {
as.data.frame(lapply(x,
function(x) {
if (is.character(x)) {
replace_empty(x) }
else {x}
})
)
}
source('~/Projects/sec-filings/src/helpers/table-helpers.R', echo=TRUE)
replace_empty(df)
replace_empty.data.table <- function(x) {
as.data.table(lapply(x,
function(x) {
if (is.character(x)) {
replace_empty(x) }
else {x}
})
)
}
replace_empty(dt)
check_parens <- function(x) {
check_pattern(x, pattern = "\\([0-9]+\\)")
}
check_parens(df$X3)
check_parens(df$X5)
check_parens <- function(x) {
check_pattern(x, pattern = "\\([0-9,\\.]+\\)")
}
check_parens(df$X5)
check_parens(df$X11)
check_numeric <- function(x) {
!all_na(as.numeric(x))
}
check_parens <- function(x) {
check_pattern(x, pattern = "\\([0-9,\\.]+\\)",
threshold = threshold)
}
check_parens(df$X11)
check_parens <- function(x, threshold = 0.3) {
check_pattern(x, pattern = "\\([0-9,\\.]+\\)",
threshold = threshold)
}
check_parens(df$X11)
check_parens("(2,711)")
check_parens <- function(x, threshold = 0.05) {
check_pattern(x, pattern = "\\([0-9,\\.]+\\)",
threshold = threshold)
}
check_parens(df$X11)
check_parens(df$X3)
check_parens(df$X5)
check_parens <- function(x, threshold = 0.01) {
check_pattern(x, pattern = "\\([0-9,\\.]+\\)",
threshold = threshold)
}
check_parens(df$X5)
duplicated
?duplicated
repeated <- function(vec) {
length(duplicated(vec)) > 0
}
has_row <- function(df, condition) {
any(apply(df, MARGIN = 1, condition))
}
has_row(x, repeated)
x
has_row(df repeated)
has_row(df, repeated)
which_row <- function(df, condition) {
which(apply(df, MARGIN = 1, condition))
}
which_row(df, repeated)
repeated <- function(vec) {
length(duplicated(vec)) > 1
}
which_row(df, repeated)
repeated <- function(vec) {
length(duplicated(vec))/length(vec) > 0.5
}
remove_na_cols(df)
remove_na_cols(df) -> df
which_row(df, repeated)
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
length(duplicated(vec))/length(vec) > 0.5
}
which_row(df, repeated)
source('~/Projects/sec-filings/src/helpers/table-helpers.R', echo=TRUE)
replace_empty(df)
replace_empty(df) -> df
which_row(df, repeated)
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
length(duplicated(vec))/length(vec) > 0.5
}
has_row <- function(df, condition) {
any(apply(df, MARGIN = 1, condition))
}
which_row <- function(df, condition) {
which(apply(df, MARGIN = 1, condition))
}
which_row(df, repeated)
df
debugonce(repeated)
which_row(df, repeated)
vec
duplicated(vec)
duplicated
duplicated.vector
duplicated.default
?
nmax
?nmax
nmax
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
length(sum(duplicated(vec)))/length(vec) > 0.5
}
which_row(df, repeated)
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
if(length(vec) == 0) {
T
} else {
length(sum(duplicated(vec)))/length(vec) > 0.5
}
}
df[which_row(df, repeated),]
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
if(length(vec) == 0) {
T
} else {
length(sum(duplicated(vec)))/length(vec) > 0.5
}
}
df[which_row(df, repeated),]
df[1,]
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
if(length(vec) == 0) {
T
} else {
dups <- duplicated(vec)
if(any(dups)) {
numdups <- sum(dups) + 1
} else {
numdups <- 0
}
numdups/length(vec) > 0.5
}
}
df[which_row(df, repeated),]
repeated <- function(vec) {
vec <- subset(vec, !is.na(vec))
if(length(vec) == 0) {
T
} else {
dups <- duplicated(vec)
if(any(dups)) {
numdups <- sum(dups) + 1
} else {
numdups <- 0
}
numdups > 0
}
}
df[which_row(df, repeated),]
df
head(df)
df[which_row(df, repeated),]
na_rows <- function(df) {
apply(df, all_na, MARGIN = 1)
}
na_rows(df)
na_rows <- function(df) {
apply(df, all_na, MARGIN = 1)
}
remove_na_rows <- function(df) {
UseMethod("remove_na_cols")
}
remove_na_rows.data.frame <- function(df) {
cols <- which(!na_cols(df))
df[,cols]
}
remove_na_rows.data.table <- function(df) {
cols <- which(!na_cols(df))
df[,cols, with = F]
}
remove_na_rows(df)
df
class(df)
remove_na_rows.data.table <- function(df) {
cols <- which(!na_cols(df))
df[rows,, with = F]
}
remove_na_rows.data.frame <- function(df) {
rows <- which(!na_rows(df))
df[rows,]
}
remove_na_rows.data.table <- function(df) {
rows <- which(!na_rows(df))
df[rows,, with = F]
}
remove_na_rows(df)
remove_na_rows.data.table <- function(df) {
rows <- which(!na_rows(df))
df[rows,,]
}
remove_na_rows(df)
remove_na_rows.data.frame <- function(df) {
rows <- which(!na_rows(df))
df[rows,]
}
remove_na_rows.data.table <- function(df) {
rows <- which(!na_rows(df))
df[rows,]
}
remove_na_rows(df)
remove_na_rows
remove_na_rows.data.frame()
remove_na_rows.data.frame
remove_na_rows.data.table
debugonce(remove_na_rows)
remove_na_rows(df)
remove_na_rows <- function(df) {
UseMethod("remove_na_rows")
}
remove_na_rows(df)
df <- remove_na_rows(df)
most_na <- function(vec) {
sum(is.na(vec))/length(vec) > 0.3
}
has_row(df, most_na)
which_row(df, most_na)
df[which_row(df, most_na),]
df[which_row(df, most_na),] %>% View
library(magrittr)
df[which_row(df, most_na),] %>% View
is_header_footer <- function(x) {
is_repeated(x) | most_na(x)
}
which_row(df, is_header_footer)
source('~/Projects/sec-filings/src/helpers/header-helpers.R', echo=TRUE)
which_row(df, is_header_footer)
## check if it's a repeating vector (happens with html tables sometimes)
is_header_footer <- function(x) {
(is_repeated(x) | most_na(x))
}
which_row(df, is_header_footer)
is_header_footer(df)
is_header_footer(df[1,])
is_header_footer(df[2,])
is_header_footer(df[3,])
## check which rows match a condition
which_row <- function(df, condition) {
unique(sort(which(apply(df, MARGIN = 1, condition))))
}
is_header_footer(df[3,])
which_row(df, is_header_footer)
## check which rows match a condition
which_row <- function(df, condition) {
which(apply(df, MARGIN = 1, condition))
}
which_row(df, is_header_footer)
apply(df, MARGIN = 1, is_header_footer)
which(apply(df, MARGIN = 1, is_header_footer))
as.numeric(which(apply(df, MARGIN = 1, is_header_footer)))
rownames(df)
## check which rows match a condition
which_row <- function(df, condition) {
as.numeric(which(apply(df, MARGIN = 1, condition)))
}
which_row(df, is_header_footer)
min(which_row(df, is_main_data))
df %>% View
dt
dt %>% View
is_main_data(df)
get_main_data <- function(df) {
df[which_row(df, is_main_data)]
}
get_main_data(df)
get_main_data <- function(df) {
df[which_row(df, is_main_data),]
}
get_main_data(df)
get_main_data(df) %>% View
header <- df[subset(header_footer, header_footer < footer_start),]
footer_start <- max(which_row(df, is_main_data))
header_footer <- which_row(is_header_footer(df))
header <- df[subset(header_footer, header_footer < footer_start),]
header_footer <- which_row(is_header_footer(df))
footer_start <- max(which_row(df, is_main_data))
header_footer <- which_row(df, is_header_footer)
header <- df[subset(header_footer, header_footer < footer_start),]
header
header
header_end <- min(which_row(df, is_main_data))
footer_start <- max(which_row(df, is_main_data))
header_footer <- which_row(df, is_header_footer)
header <- df[subset(header_footer, header_footer < footer_start),]
get_header(df) {
header_end <- min(which_row(df, is_main_data))
footer_start <- max(which_row(df, is_main_data))
header_footer <- which_row(df, is_header_footer)
header <- df[subset(header_footer, header_footer < header_end),]
footer <- df[subset(header_footer, header_footer > header_end),]
}
get_header <- function(df) {
header_end <- min(which_row(df, is_main_data))
footer_start <- max(which_row(df, is_main_data))
header_footer <- which_row(df, is_header_footer)
header <- df[subset(header_footer, header_footer < header_end),]
footer <- df[subset(header_footer, header_footer > header_end),]
}
header_end <- min(which_row(df, is_main_data))
footer_start <- max(which_row(df, is_main_data))
header_footer <- which_row(df, is_header_footer)
header <- df[subset(header_footer, header_footer < header_end),]
footer <- df[subset(header_footer, header_footer > header_end),]
header
Reduce(function(x, y) if(!check_parens(c(x, y)).) paste0(x, y), df$X2)
Reduce(function(x, y) if(!check_parens(c(x, y))) paste0(x, y), df$X2)
library(stringr)
Reduce(function(x, y) if(!check_parens(c(x, y)).) paste0(x, y), df$X2)
Reduce(function(x, y) if(!check_parens(c(x, y))) paste0(x, y), df$X2)
check_parens(df$X1)
check_parens(df$X2)
check_parens
check_pattern
str_count(df$X1)
##  check column format
check_pattern <- function(x, pattern, threshold = 0.3) {
sum(str_count(x, pattern), na.rm = T)/length(x) > threshold
}
check_parens(df$X2)
check_parens(df$X1)
check_parens(df$X3)
check_parens(df$X4)
df$x4
df$x5
df$x6
df$X7
df$X9
check_comma(df$X9)
get_main_data(df)
get_main_data(df) -> mn
check_comma(mn)
check_comma(mn$X7)
check_comma(mn$X9)
check_format <- function(x) {
if (check_numeric(x)) {
"numeric"
} else if (check_comma(x)) {
"comma"
} else if (check_percent(x)) {
"percent"
} else if (check_parens(x)) {
"parens"
} else {
"character"
}
}
convert_percent <- function(x) {
str_extract_all(x, "[0-9]")
}
df
check_excel_date <- function(x) {
check_pattern(x, pattern = "[0-9]{2}/[0-9]{2}/[0-9]")
}
check_excel_date(df$X7)
df$X7
check_pattern(x, pattern = "[0-9]{2}\\/[0-9]{2}\\/[0-9]")
check_pattern(x, pattern = "[0-9]{2}")
check_pattern(x, pattern = "[0-9]{2}./")
check_pattern(x, pattern = "[0-9]{2}\\/")
check_pattern(x, pattern = "[0-9]{2}\/")
check_pattern(x, pattern = "[0-9]{2}/")
check_pattern(x, pattern = "[0-9]{1,2}/")
check_pattern(x, pattern = "[0-9]{1,2}/[0-9]{1,2}")
date_regex <- "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"
check_excel_date <- function(x) {
date_regex <- "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"
check_pattern(x, pattern = date_regex)
}
check_date
check_date(x)
check_date <- function(x) {
date_regex <- "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"
check_pattern(x, pattern = date_regex)
}
check_date(x)
check_date(df$X7)
df$X7
grepl(date_regex, df$X7)
check_date <- function(x) {
date_regex <- "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"
check_pattern(x, pattern = date_regex) | check_pattern(paste0("0",x), pattern = date_regex)
}
check_date(df$X7)
df$X7 -> x
check_pattern(paste0("0",x), pattern = date_regex)
str_count(x, date_regex)
as.Date(df$V7, format = "%d/%m/%Y")
as.Date(df$X7, format = "%d/%m/%Y")
df$V7
df%X7
df$X7
as.Date("12/20/2012", format = "%m/%d/%Y")
expand.grid(c("%m","%d","Y"), c("-","/","."))
expand.grid(c("%m","%d","%Y"))
expand.grid(c("%m","%d","%Y"),c("%m","%d","%Y"))
expand.grid(c("%m","%d","%Y"),c("%m","%d","%Y"),c("%m","%d","%Y"))
orders <- unlist(expand.grid(c("%m","%d","%Y"),c("%m","%d","%Y"),c("%m","%d","%Y")))
orders
orders <- as.list(expand.grid(c("%m","%d","%Y"),c("%m","%d","%Y"),c("%m","%d","%Y")))
orders
orders <- expand.grid(c("%m","%d","%Y"),c("%m","%d","%Y"),c("%m","%d","%Y"), stringsAsFactors = F)
orders
orders <- expand.grid(c("%m","%d","%Y"),c("%m","%d","%Y"),c("%m","%d","%Y"), stringsAsFactors = F)
sep <- c("/","-",".")
df
convert_percent <- function(x) {
str_extract_all(x, "[0-9]")
}
convert_percent("7.5%")
convert_percent <- function(x) {
str_extract_all(x, "[0-9]", simplify = T)
}
convert_percent("7.5%")
convert_percent <- function(x) {
str_extract_all(x, "[0-9\\.]", simplify = T)
}
convert_percent <- function(x) {
str_extract_all(x, "[0-9\\.]", simplify = T)
}
